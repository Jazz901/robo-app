{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","React","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","resp","json","data","catch","err","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"kTAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACI,yBAAKC,UAAU,iDACP,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACzB,6BACI,4BAAKF,GACL,2BAAIC,MCeLK,EApBE,SAAC,GAAe,IAAbC,EAAY,EAAZA,OACd,OACE,6BAEOA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACK,kBAAC,EAAD,CACAC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCIvBW,EAfG,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAC7B,OACI,6BACI,2BACIX,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCXI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WCyBbC,G,wLA0BEC,KAAKP,MAAMQ,oB,+BAkCL,IAAD,EACoDD,KAAKP,MAAvDS,EADF,EACEA,YAAaC,EADf,EACeA,eAAgBC,EAD/B,EAC+BA,UAC9BC,EAFD,EAC0CxB,OACjByB,QAAO,SAAAC,GAClC,OAAOA,EAAMjC,KAAKkC,cAAcC,SAASP,EAAYM,kBAExD,OAAGJ,EACQ,uCAGH,yBAAK3B,UAAU,MACX,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWW,aAAce,IACzB,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUtB,OAASwB,U,GAzEzBK,IAAMC,YAsFTC,eAzGS,SAAAC,GACpB,MAAM,CACFX,YAAaW,EAAMC,aAAaZ,YAChCrB,OAAQgC,EAAME,cAAclC,OAC5BuB,UAAWS,EAAME,cAAcX,UAC/BY,MAAOH,EAAME,cAAcC,UAKR,SAACC,GAExB,MAAO,CACHd,eAAgB,SAACe,GAAD,OAAWD,ECrBM,CACjC5B,KCJ2B,sBDK3B8B,QDmBmDD,EAAME,OAAOC,SAChEpB,gBAAiB,kBAAMgB,GCdI,SAACA,GAChCA,EAAS,CAAC5B,KCTwB,2BDUlCiC,MAAM,8CACJC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAAI,OAAIT,EAAS,CAAC5B,KCVS,yBDUqB8B,QAASO,OAC9DC,OAAM,SAAAC,GAAG,OAAIX,EAAS,CAAC5B,KCTQ,wBDSqB8B,QAASS,cDoGpDhB,CAA6Cb,GGjHtD8B,EAAqB,CACvB3B,YAAa,IAGX4B,EAAqB,CACvB1B,WAAW,EACXvB,OAAQ,GACRmC,MAAO,ICELe,G,MAASC,0BAETC,EAAcC,YAAgB,CAACpB,aDDT,WAAyC,IAAxCD,EAAuC,uDAAjCgB,EAAoBM,EAAa,uDAAN,GAC1D,OAAOA,EAAO9C,MACV,IDf2B,sBCgBvB,OAAO+C,OAAOC,OAAO,GAAIxB,EAAO,CAACX,YAAaiC,EAAOhB,UACzD,QACC,OAAON,ICJmCE,cDQtB,WAA0C,IAAzCF,EAAwC,uDAAlCiB,EAAoBK,EAAc,uDAAP,GAC3D,OAAOA,EAAO9C,MACV,IDrB8B,yBCsB1B,OAAO+C,OAAOC,OAAO,GAAIxB,EAAO,CAACT,WAAW,IAChD,IDrB8B,yBCsB1B,OAAOgC,OAAOC,OAAO,GAAIxB,EAAO,CAAChC,OAAQsD,EAAOhB,QAASf,WAAW,IACxE,IDrB6B,wBCsBzB,OAAOgC,OAAOC,OAAOxB,EAAO,CAACG,MAAOmB,EAAOhB,QAASf,WAAW,IACnE,QACI,OAAOS,MCbbyB,EAAQC,YAAYN,EAAaO,YAAgBC,IAAiBV,IAKxEW,IAASC,OACL,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,EAAD,OAEJM,SAASC,eAAe,W","file":"static/js/main.d6c564d0.chunk.js","sourcesContent":["import React from 'react'; \r\n\r\nconst Card = ({name, email, id}) => {\r\n    return(\r\n        <div className=\"tc bg black dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n                <img alt=\"Robots\" src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default Card; ","import React from 'react'; \r\nimport Card from './Card'; \r\n\r\nconst CardList = ({ robots }) =>{\r\n      return(\r\n        <div>\r\n          {\r\n               robots.map((user, i) => {\r\n                return(\r\n                     <Card\r\n                     key={i}\r\n                     id={robots[i].id}\r\n                     name={robots[i].name}\r\n                     email={robots[i].email}\r\n                 />\r\n                );\r\n            })\r\n              \r\n          }\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default CardList; ","import React from 'react'\r\n\r\nconst SearchBox = ({searchfield, searchChange}) =>{\r\n    return(\r\n        <div>\r\n            <input\r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type='search'\r\n                placeholder='search robots'\r\n                onChange={searchChange}\r\n            />\r\n\r\n        </div>\r\n        \r\n    ); \r\n}\r\n\r\nexport default SearchBox; ","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return(\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default Scroll\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport CardList from '../components/CardList'; \r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport { setSearchField, requestRobots } from '../actions'\r\n\r\n\r\n// to what state I have to listen to \r\n// states from the reducer\r\nconst mapStateToProps = state =>{\r\n    return{\r\n        searchField: state.searchRobots.searchField, \r\n        robots: state.requestRobots.robots, \r\n        isPending: state.requestRobots.isPending, \r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\n// dispatch == what triggers the action \r\nconst mapDispatchToProps = (dispatch) => {\r\n    // setSearchField is from actions.js\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)), \r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n    //for class component -> do not need it -> currently using redux\r\n    /*constructor(){\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }*/\r\n\r\n    \r\n// for functional component\r\n//const [robots, setRobots] = useState([]); \r\n//const [searchfield, setSearchField] = useState('');\r\n/*const fetchRobots = async() => {\r\n    const resp = await fetch('https://jsonplaceholder.typicode.com/users')\r\n    const data = await resp.json()\r\n    setRobots(data)\r\n}*/\r\n\r\n    // for class component\r\n    componentDidMount(){\r\n        /*fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(Response=> Response.json())\r\n        .then(users => this.setState({robots: users})); */  \r\n        this.props.onRequestRobots()      \r\n    }\r\n\r\n    // for functional component\r\n    /*useEffect(() => {\r\n        //fetchRobots()\r\n        onRequestRobots()\r\n    }, [])*/\r\n     \r\n    \r\n\r\n  // for functional component\r\n /*const onSearchChange = (event) => {\r\n     setSearchField(event.target.value)\r\n }*/\r\n /*const filteredRobots = robots.filter(robot =>{\r\n     return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n  })\r\n\r\n return(\r\n     <div>\r\n         {\r\n             isPending ? <h1>Loading</h1> :\r\n              <div className=\"tc\">\r\n                 <h1 className=\"f1\">Robo Friends</h1>\r\n                 <SearchBox searchChange={onSearchChange} />\r\n                 <Scroll>\r\n                     <CardList robots={ filteredRobots }/>\r\n                 </Scroll>\r\n              </div>\r\n         }\r\n     </div>\r\n ); */ \r\n    // for class component\r\n    render() {\r\n        const {searchField, onSearchChange, isPending, robots} = this.props\r\n        const filteredRobots = robots.filter(robot =>{\r\n           return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        if(isPending){\r\n            return <h1>Loading</h1>\r\n        } else{\r\n            return(\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f1\">Robo Friends</h1>\r\n                    <SearchBox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                        <CardList robots={ filteredRobots }/>\r\n                    </Scroll>\r\n                </div>\r\n                \r\n            ); \r\n\r\n        }\r\n       \r\n\r\n    }\r\n   \r\n}   \r\n//(higher order function) connect(mapStateToProps, mapDispatchToProps) -> to what state and action I should listen to\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App); ","import { CHANGE_SEARCH_FIELD, ROBOTS_REQUEST_PENDING, ROBOTS_REQUEST_SUCCESS, ROBOTS_REQUEST_FAILED } from './constants.js'\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n        type: CHANGE_SEARCH_FIELD, \r\n        payload: text\r\n})\r\n\r\n\r\n// from app.js mapDispatchToProps\r\n//returns a function\r\nexport const requestRobots = () => (dispatch) =>{\r\n    dispatch({type: ROBOTS_REQUEST_PENDING})\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n     .then(resp => resp.json())\r\n     .then(data => dispatch({type: ROBOTS_REQUEST_SUCCESS, payload: data}))\r\n     .catch(err => dispatch({type: ROBOTS_REQUEST_FAILED, payload: err}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\n// This is a promise  -> 3 States -> 1. Pending\r\nexport const ROBOTS_REQUEST_PENDING = 'ROBOTS_REQUEST_PENDING';\r\n\r\nexport const ROBOTS_REQUEST_SUCCESS = 'ROBOTS_REQUEST_SUCCESS';\r\n\r\nexport const ROBOTS_REQUEST_FAILED = 'ROBOTS_REQUEST_FAILED';\r\n\r\n\r\n","import { CHANGE_SEARCH_FIELD, ROBOTS_REQUEST_PENDING, ROBOTS_REQUEST_SUCCESS, ROBOTS_REQUEST_FAILED } from './constants.js'\r\n\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false, \r\n    robots: [], \r\n    error: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) =>{\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default: \r\n         return state;\r\n    }\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type){\r\n        case ROBOTS_REQUEST_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case ROBOTS_REQUEST_SUCCESS: \r\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n        case ROBOTS_REQUEST_FAILED: \r\n            return Object.assign(state, {error: action.payload, isPending: false})\r\n        default: \r\n            return state; \r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\r\nimport { createLogger } from 'redux-logger'\r\nimport  thunkMiddleware from 'redux-thunk' // listens for actions returning a funciton\r\nimport './index.css';\r\nimport App from './containers/App'; \r\nimport { searchRobots, requestRobots } from './reducers'\r\nimport 'tachyons'; \r\n\r\n//create logger\r\nconst logger = createLogger(); \r\n\r\nconst rootReducer = combineReducers({searchRobots, requestRobots})\r\n\r\n//combine all reducers together\r\n// pass store as a prop to app\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger)); \r\n\r\n\r\n\r\n// Provider passes down the store to all the components\r\nReactDOM.render(  \r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n   ,document.getElementById('root'),\r\n\r\n  \r\n);\r\n"],"sourceRoot":""}